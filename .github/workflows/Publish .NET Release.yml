name: Publish .NET Release

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
    
    - name: Publish
      run: dotnet publish --configuration Release --output ./publish --self-contained false
    
    - name: Get version from project
      id: get_version
      run: |
          TargetVersion=""
          if [ "${{ github.event.release.tag_name }}" ] ; then
            TargetVersion=${{ github.event.release.tag_name }}
          else
            # 提取版本号（确保项目文件路径正确）
            TargetVersion=$(grep -oP '(?<=<Version>).*?(?=<\/Version>)' ./FailReport.csproj)
          fi
          TargetVersion=${TargetVersion#v}
          echo "TargetVersion: $TargetVersion"
          echo "TargetVersion=$TargetVersion" >> $GITHUB_OUTPUT
    
    - name: Zip publish artifacts (命名为项目名+版本号)
      run: |
        # 定义项目名称（根据实际项目名修改，此处假设为FailReport）
        PROJECT_NAME="FailReport"
        # 压缩包名称格式：项目名_v版本号.zip
        ZIP_NAME="${PROJECT_NAME}_v${{ steps.get_version.outputs.TargetVersion }}.zip"
        # 执行压缩（将publish目录内容压缩到指定文件）
        zip -r "$ZIP_NAME" ./publish/*
      # 说明：如果项目名称需要动态获取（例如从.csproj中提取），可以用类似版本号的方式grep获取
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.get_version.outputs.TargetVersion }}
        name: Release v${{ steps.get_version.outputs.TargetVersion }}
        body: |
          ## Release v${{ steps.get_version.outputs.TargetVersion }}
          Automated release generated by GitHub Actions.
        # 上传修改后的压缩包（使用变量引用确保名称匹配）
        files: "${{ env.PROJECT_NAME }}_v${{ steps.get_version.outputs.TargetVersion }}.zip"
        draft: false
        prerelease: false